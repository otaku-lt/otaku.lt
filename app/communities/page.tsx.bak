"use client";

import React, { useState, useEffect } from "react";
import { MessageCircle, Users, Youtube, Instagram, Facebook, ExternalLink, Star } from "lucide-react";
import { ContentPageHeader } from "@/components/layout/ContentPageHeader";

interface Community {
  id: string;
  title: string;
  description: string;
  category: string;
  members: number;
  featured?: boolean;
  links: Array<{
    type: string;
    url: string;
  }>;
  features?: string[];
  activity?: string;
}

const getIcon = (type: string) => {
  switch (type.toLowerCase()) {
    case 'discord':
      return <MessageCircle className="w-5 h-5" />;
    case 'youtube':
      return <Youtube className="w-5 h-5" />;
    case 'facebook':
      return <Facebook className="w-5 h-5" />;
    case 'instagram':
      return <Instagram className="w-5 h-5" />;
    default:
      return <Users className="w-5 h-5" />;
  }
};

const getMemberCount = (count: number) => {
  if (count >= 1000) {
    return `${(count / 1000).toFixed(1)}k`;
  }
  return count.toString();
};

const getCategoryName = (category: string) => {
  const names: Record<string, string> = {
    'anime': 'Anime & Manga',
    'cosplay': 'Cosplay',
    'dance': 'Dance',
    'gaming': 'Gaming',
    'art': 'Art & Creative',
    'discussion': 'Discussion',
  };
  return names[category] || category.charAt(0).toUpperCase() + category.slice(1);
};

export default function CommunitiesPage() {
  // Add dark theme class to html element
  React.useEffect(() => {
    document.documentElement.classList.add('dark');
    return () => {
      document.documentElement.classList.remove('dark');
    };
  }, []);

  const [selectedCategory, setSelectedCategory] = useState("all");
  const [communities, setCommunities] = useState<Community[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    const fetchCommunities = async () => {
      try {
        const response = await fetch('/api/communities');
        if (!response.ok) throw new Error('Failed to fetch communities');
        const data = await response.json();
        setCommunities(data);
      } catch (error) {
        console.error('Error loading communities:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCommunities();
  }, []);

  const filteredCommunities = communities.filter(community => {
    const matchesSearch = community.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                        (community.description || '').toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || community.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const categories = ['all', ...Array.from(new Set(communities.map(c => c.category)))];

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background text-foreground">
        <ContentPageHeader 
          title="Bendruomenės" 
        />
        <div className="container mx-auto px-4 py-8">
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-muted rounded w-1/3"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="bg-card border rounded-lg p-6 space-y-4">
                  <div className="h-6 bg-muted rounded w-3/4"></div>
                  <div className="h-4 bg-muted rounded w-1/2"></div>
                  <div className="h-4 bg-muted rounded w-full"></div>
                  <div className="h-4 bg-muted rounded w-5/6"></div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background text-foreground">
      <ContentPageHeader 
        title="Bendruomenės" 
      />
      
      <div className="container mx-auto px-4 py-8">
        {/* Search and Filter */}
        <div className="max-w-2xl mx-auto mb-8">
          <div className="relative">
            <input
              type="text"
              placeholder="Ieškoti bendruomenių..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-4 pr-10 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/50"
            />
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>
        </div>

        {/* Category filters */}
        <div className="flex flex-wrap gap-2 mb-8 justify-center">
          {categories.map((category) => (
            <button
              key={category}
              onClick={() => setSelectedCategory(category)}
              className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${
                selectedCategory === category
                  ? 'bg-primary text-white'
                  : 'bg-muted hover:bg-muted/80'
              }`}
            >
              {category === 'all' ? 'Visos' : getCategoryName(category)}
            </button>
          ))}
        </div>

        {/* Communities grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredCommunities.map((community) => (
            <div 
              key={community.id}
              className={`bg-card border rounded-xl overflow-hidden hover:shadow-lg transition-shadow ${
                community.featured ? 'ring-2 ring-yellow-400' : ''
              }`}
            >
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div className="flex items-center gap-3">
                    <div className={`p-2 rounded-lg ${
                      community.featured 
                        ? 'bg-yellow-100 text-yellow-600' 
                        : 'bg-muted text-foreground'
                    }`}>
                      {getIcon(community.links?.[0]?.type || 'users')}
                    </div>
                    <h3 className="text-xl font-semibold">{community.title}</h3>
                  </div>
                  {community.featured && (
                    <span className="inline-flex items-center gap-1 bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded-full">
                      <Star className="w-3 h-3 fill-yellow-400" />
                      Populiari
                    </span>
                  )}
                </div>
                
                <p className="text-muted-foreground mb-4">{community.description}</p>
                
                <div className="flex items-center justify-between text-sm text-muted-foreground mb-4">
                  <span className="inline-flex items-center gap-1">
                    <Users className="w-4 h-4" />
                    {getMemberCount(community.members)} narių
                  </span>
                  <span className="bg-muted px-2 py-1 rounded-full text-xs">
                    {getCategoryName(community.category)}
                  </span>
                </div>

                {community.links && community.links.length > 0 && (
                  <div className="flex gap-2 mt-4">
                    {community.links.map((link, index) => (
                      <a
                        key={index}
                        href={link.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="p-2 rounded-md bg-muted hover:bg-muted/80 transition-colors"
                        aria-label={link.type}
                      >
                        {getIcon(link.type)}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        {filteredCommunities.length === 0 && (
          <div className="text-center py-12">
            <p className="text-muted-foreground">Nerasta bendruomenių pagal paiešką.</p>
          </div>
        )}
      </div>
    </div>
  );
}