"use client";

import React, { useState, useEffect, useMemo } from "react";
import Link from "next/link";
import { Music, Youtube, Instagram, Facebook as FacebookIcon, Mail, Music2, Calendar, MapPin, Users, Mic2, Disc, Play, Pause, Volume2, VolumeX, Award, ExternalLink } from "lucide-react";
import { ContentPageHeader } from "@/components/layout/ContentPageHeader";
import { getKornihaEvents, getFeaturedEvent } from "@/lib/events";

// Define types for the setlist
type SetlistDay = {
  day?: number;
  type: 'Japanese' | 'Lithuanian';
  songs: string[];
};

type EventSetlist = {
  days: SetlistDay[];
};

// Define the Event type
type Event = {
  id: string;
  title: string;
  date: string;
  endDate?: string;
  location: string;
  description: string;
  featured: boolean;
  link?: string;
  setlist?: EventSetlist | string;
};

export default function KornihaBandPage() {
  const [activeTab, setActiveTab] = useState("about");
  const [events, setEvents] = useState<Event[]>([]);
  // Define a type for the setlist day
  type SetlistDay = {
    day?: number;
    type: 'Japanese' | 'Lithuanian';
    songs: string[];
  };

  // Define a type for the setlist
  type EventSetlist = {
    days: SetlistDay[];
  };

  const [featuredEvent, setFeaturedEvent] = useState<Event & { setlist?: EventSetlist | string | null } | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const downloadCalendarEvent = () => {
    if (!featuredEvent) return;
    
    try {
      // Format dates for iCal
      const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        const pad = (n: number) => n < 10 ? '0' + n : n;
        
        return [
          date.getUTCFullYear(),
          pad(date.getUTCMonth() + 1),
          pad(date.getUTCDate()),
          'T',
          pad(date.getUTCHours() || 18), // Default to 6 PM if time not specified
          pad(date.getUTCMinutes() || 0),
          '00',
          'Z'
        ].join('');
      };

      const startDate = new Date(featuredEvent.date);
      const endDate = featuredEvent.endDate 
        ? new Date(featuredEvent.endDate)
        : new Date(startDate.getTime() + 2 * 60 * 60 * 1000); // Default 2 hour event

      // Create iCal content
      const icsContent = [
        'BEGIN:VCALENDAR',
        'VERSION:2.0',
        'PRODID:-//Otaku.lt//Korniha Band//EN',
        'CALSCALE:GREGORIAN',
        'METHOD:PUBLISH',
        'BEGIN:VEVENT',
        `UID:${Date.now()}@otaku.lt`,
        `DTSTAMP:${formatDate(new Date().toISOString())}`,
        `DTSTART:${formatDate(startDate.toISOString())}`,
        `DTEND:${formatDate(endDate.toISOString())}`,
        `SUMMARY:${featuredEvent.title.replace(/[\,;]/g, '\\$&')}`,
        `DESCRIPTION:${featuredEvent.description.replace(/[\,;]/g, '\\$&')}\\n\\nLocation: ${featuredEvent.location.replace(/[\,;]/g, '\\$&')}`,
        `LOCATION:${featuredEvent.location.replace(/[\,;]/g, '\\$&')}`,
        'END:VEVENT',
        'END:VCALENDAR'
      ].join('\r\n');

      // Create download link
      const element = document.createElement('a');
      const file = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
      element.href = URL.createObjectURL(file);
      element.download = `korniha-event-${featuredEvent.date}.ics`;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    } catch (error) {
      console.error('Error generating calendar event:', error);
      alert('Failed to generate calendar event. Please try again.');
    }
  };
  
  // Filter events
  const now = new Date();
  const upcomingEvents = events.filter(event => new Date(event.date) >= now);
  const pastEvents = events.filter(event => new Date(event.date) < now);
  const featured = [...events]
    .filter(event => event.featured)
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0] || null;

  useEffect(() => {
    const fetchData = async () => {
      try {
        console.log('Fetching events data...');
        const eventsData = await getKornihaEvents();
        console.log('Events data:', eventsData);
        
        if (eventsData && Array.isArray(eventsData)) {
          setEvents(eventsData);
          
          // Find the first featured event
          const featured = eventsData
            .filter(event => event.featured)
            .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0] || null;
          
          setFeaturedEvent(featured);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  const bandMembers = [
    {
      name: "Korniha",
      role: "Vocals",
      description: "A free spirit with an ethereal voice that can go from whisper to war cry in a heartbeat. Her energy is both powerful and dreamy, filling the room with an otherworldly presence.",
      favorite: "Carrying You (Laputa: Castle in the Sky)"
    },
    {
      name: "Holms",
      role: "Guitar",
      description: "Grumpy cultured weeb with an encyclopedic knowledge of JDM cars. His guitar riffs are as precise as a well-tuned engine, and his love for Japanese pop culture runs as deep as his collection of rare anime figures.",
      favorite: "Dango Daikazoku (Clannad)"
    },
    {
      name: "Tdude",
      role: "Percussion",
      description: "The rhythm keeper who believes everything is a drum if you hit it right. His sticks are an extension of his arms, and his energy is as infectious as the beats he creates.",
      favorite: "Kokoro Pyon Pyon (Is the Order a Rabbit?)"
    }
  ];

  // Song data and sorting state
  const [songs, setSongs] = useState<Array<{
    title: string;
    original: string;
    artist?: string;
    type: 'ost' | 'game' | 'citypop' | 'jpop' | 'vocaloid';
    languages: ('jp' | 'lt' | 'en')[];
    alt_title?: string;
  }>>([]);
  
  const [sortConfig, setSortConfig] = useState<{ key: 'title' | 'type' | 'languages'; direction: 'asc' | 'desc' }>({
    key: 'title',
    direction: 'asc'
  });
  
  // Sort songs based on sortConfig
  const sortedSongs = useMemo(() => {
    const sortableItems = [...songs];
    if (!sortConfig.key) return sortableItems;
    
    sortableItems.sort((a, b) => {
      // Special handling for language sorting
      if (sortConfig.key === 'languages') {
        const aLangs = a.languages;
        const bLangs = b.languages;
        
        // If both have multiple languages, sort by number of languages (descending)
        if (aLangs.length > 1 || bLangs.length > 1) {
          // If one has more languages, it comes first
          if (aLangs.length !== bLangs.length) {
            return sortConfig.direction === 'asc' 
              ? bLangs.length - aLangs.length 
              : aLangs.length - bLangs.length;
          }
          // If same number of languages, sort alphabetically by first language
          return sortConfig.direction === 'asc'
            ? aLangs[0].localeCompare(bLangs[0])
            : bLangs[0].localeCompare(aLangs[0]);
        }
        
        // For single language, sort by language code
        return sortConfig.direction === 'asc'
          ? aLangs[0]?.localeCompare(bLangs[0] || '') || 0
          : bLangs[0]?.localeCompare(aLangs[0] || '') || 0;
      }
      
      // For other columns, use standard string comparison
      const aValue = String(a[sortConfig.key] || '');
      const bValue = String(b[sortConfig.key] || '');
      
      return sortConfig.direction === 'asc' 
        ? aValue.localeCompare(bValue)
        : bValue.localeCompare(aValue);
    });
    
    return sortableItems;
  }, [songs, sortConfig]);
  
  const requestSort = (key: 'title' | 'type' | 'languages') => {
    let direction: 'asc' | 'desc' = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  // Fetch songs data
  useEffect(() => {
    const fetchSongs = async () => {
      try {
        const response = await fetch('/api/songs');
        if (response.ok) {
          const data = await response.json();
          setSongs(data);
        }
      } catch (error) {
        console.error('Error fetching songs:', error);
      }
    };

    fetchSongs();
  }, []);

  // Language flag components
  const languageFlags: Record<string, { emoji: string; title: string }> = {
    jp: { emoji: 'ðŸ‡¯ðŸ‡µ', title: 'Japanese' },
    lt: { emoji: 'ðŸ‡±ðŸ‡¹', title: 'Lithuanian' },
    en: { emoji: 'ðŸ‡¬ðŸ‡§', title: 'English' },
  };

  // Song type labels and colors
  const typeConfig = {
    ost: { 
      label: 'Anime', 
      color: 'bg-pink-100 dark:bg-pink-900/30 text-pink-600 dark:text-pink-400' 
    },
    game: { 
      label: 'Game', 
      color: 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400' 
    },
    citypop: { 
      label: 'City Pop', 
      color: 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-600 dark:text-yellow-400' 
    },
    jpop: { 
      label: 'J-Pop', 
      color: 'bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400' 
    },
    vocaloid: { 
      label: 'Vocaloid', 
      color: 'bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400' 
    },
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-50 to-pink-50 dark:from-gray-900 dark:to-gray-800">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-300">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800 text-gray-900 dark:text-gray-100">
      <ContentPageHeader 
        title="Korniha Band"
        backText="Back to Home"
        backHref="/"
      />
      
      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* Band Image */}
        <div className="flex flex-col items-center mb-12 text-center">
          <div className="w-full max-w-4xl rounded-2xl shadow-xl mb-6 overflow-hidden">
            <img 
              src="/images/band/band.png" 
              alt="Korniha Band - Anime music cover band performing your favorite Japanese songs in Lithuanian and original language"
              className="w-full h-auto transition-transform duration-500 hover:scale-105"
            />
          </div>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl">
            Lithuania's favorite anime cover band bringing your beloved anime songs to life 
            with passion, energy, and authentic sound.
          </p>
        </div>

        {/* Hero Section - Next Performance */}
        {featuredEvent && (
          <div className="bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl p-6 md:p-8 text-white mb-8 shadow-lg transform transition-all hover:shadow-xl hover:-translate-y-0.5 relative overflow-hidden">
            {/* Widget Label */}
            <div className="absolute top-0 left-0 bg-white/10 px-4 py-1.5 rounded-br-lg text-sm font-medium text-white/80 backdrop-blur-sm">
              Next Performance
            </div>
            
            <div className="pt-6 mb-4">
              <h3 className="text-xl md:text-2xl font-semibold text-white/95 text-center">{featuredEvent.title}</h3>
            </div>
            
            <p className="text-purple-100 mb-6 text-center text-sm md:text-base max-w-3xl mx-auto">{featuredEvent.description}</p>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8 max-w-5xl mx-auto">
              <div className="flex items-start space-x-2 bg-white/10 p-3 rounded-lg">
                <Calendar className="h-5 w-5 flex-shrink-0 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-white/80">When</p>
                  <p className="text-white">
                    {new Date(featuredEvent.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}
                    {featuredEvent.endDate && (
                      <span> - {new Date(featuredEvent.endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
                    )}
                  </p>
                </div>
              </div>
              
              <div className="flex items-start space-x-2 bg-white/10 p-3 rounded-lg">
                <MapPin className="h-5 w-5 flex-shrink-0 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-white/80">Where</p>
                  <p className="text-white">{featuredEvent.location}</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-2 bg-white/10 p-3 rounded-lg">
                <Music2 className="h-5 w-5 flex-shrink-0 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-white/80">Setlist</p>
                  <p className="text-white">
                    {!featuredEvent?.setlist ? (
                      'TBA'
                    ) : typeof featuredEvent.setlist === 'string' ? (
                      <span className="inline-flex items-center px-2 py-0.5 rounded bg-white/20 text-xs">
                        {featuredEvent.setlist}
                      </span>
                    ) : (
                      <span className="flex flex-wrap gap-1">
                        {featuredEvent.setlist?.days?.length > 0 ? (
                          featuredEvent.setlist.days.map((day, i) => (
                            <span key={i} className="inline-flex items-center px-2 py-0.5 rounded bg-white/20 text-xs">
                              {day?.day ? `Day ${day.day}: ` : ''}{day?.type || 'Performance'}
                            </span>
                          ))
                        ) : (
                          <span className="text-sm text-white/70">No setlist available yet</span>
                        )}
                      </span>
                    )}
                  </p>
                </div>
              </div>
            </div>
            
            <div className="flex flex-wrap justify-center gap-3">
              <button 
                onClick={downloadCalendarEvent}
                className="px-5 py-2.5 bg-white text-purple-600 rounded-full font-medium hover:bg-purple-50 transition-all flex items-center text-sm md:text-base"
              >
                <Calendar className="mr-2 h-4 w-4" />
                Add to Calendar
              </button>
              {featuredEvent.link ? (
                <a 
                  href={featuredEvent.link} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="px-5 py-2.5 border-2 border-white/30 text-white rounded-full font-medium hover:bg-white/10 transition-all flex items-center text-sm md:text-base"
                >
                  <ExternalLink className="mr-2 h-4 w-4" />
                  More Info
                </a>
              ) : (
                <button 
                  disabled
                  className="px-5 py-2.5 border-2 border-white/10 text-white/50 rounded-full font-medium flex items-center text-sm md:text-base cursor-not-allowed"
                  title="More information will be available soon"
                >
                  <span className="relative flex h-3 w-3 mr-2">
                    <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-white/40"></span>
                    <span className="relative inline-flex rounded-full h-3 w-3 bg-white/70"></span>
                  </span>
                  More Info (coming soon)
                </button>
              )}
            </div>
          </div>
        )}

        {/* Tab Navigation */}
        <div className="flex flex-wrap gap-2 mb-8 justify-center">
          {[
            { id: "about", label: "About" },
            { id: "members", label: "Members" },
            { id: "songs", label: "Songs" },
            { id: "gigs", label: "Gigs" }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`px-6 py-3 rounded-full text-sm font-medium transition-all ${
                activeTab === tab.id
                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg'
                  : 'bg-white/80 dark:bg-gray-800/80 text-gray-700 dark:text-gray-200 hover:bg-purple-100 dark:hover:bg-gray-700'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>

        {/* Tab Content */}
        <div className="min-h-96">
          {activeTab === "about" && (
            <div className="space-y-8">
              <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl p-8 shadow-xl">
                <h3 className="text-2xl font-bold mb-6 text-gray-800 dark:text-white">About Korniha Band</h3>
                <div className="prose prose-lg max-w-none dark:prose-invert">
                  <p className="text-gray-600 dark:text-gray-300 mb-4">
                    Korniha Band was born from a shared passion for anime music and the desire to bring 
                    those incredible soundtracks to life. We're a group of Lithuanian musicians who grew up 
                    loving anime and wanted to share that love through music.
                  </p>
                  <p className="text-gray-600 dark:text-gray-200 mb-4">
                    From epic opening themes to emotional ending songs, we carefully arrange and perform 
                    both classic and modern anime music. Our goal is to create an authentic experience 
                    that captures the spirit and emotion of the original compositions.
                  </p>
                  <p className="text-gray-600 dark:text-gray-200">
                    Whether you're a long-time anime fan or just discovering this amazing music, 
                    we invite you to join us for an unforgettable musical journey through the world of anime.
                  </p>
                </div>
              </div>

              <div className="grid md:grid-cols-3 gap-6">
                <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 shadow-xl text-center">
                  <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Music className="text-purple-600" size={32} />
                  </div>
                  <h4 className="text-lg font-bold mb-2 dark:text-white">30+ Songs</h4>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">Performing anime covers in both Japanese and Lithuanian</p>
                </div>
                <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 shadow-xl text-center">
                  <div className="w-16 h-16 bg-pink-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Users className="text-pink-600" size={32} />
                  </div>
                  <h4 className="text-lg font-bold mb-2 dark:text-white">20+ Events</h4>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">Performing at cons and events across the Baltic states</p>
                </div>
                <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 shadow-xl text-center">
                  <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Award className="text-purple-600" size={32} />
                  </div>
                  <h4 className="text-lg font-bold mb-2 dark:text-white">1 Year</h4>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">Passionately performing since 2024</p>
                </div>
              </div>
            </div>
          )}

          {activeTab === "members" && (
            <div className="grid md:grid-cols-2 gap-6">
              {bandMembers.map((member, index) => (
                <div key={index} className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 shadow-xl">
                  <div className="space-y-4">
                    <div className="flex items-center gap-4">
                      {['Holms', 'Korniha'].includes(member.name) ? (
                        <div className="w-16 h-16 rounded-full overflow-hidden border-2 border-purple-400">
                          <img 
                            src={`/images/band/${member.name.toLowerCase()}.${member.name === 'Holms' ? 'png' : 'jpg'}`}
                            alt={member.name}
                            className="w-full h-full object-cover"
                          />
                        </div>
                      ) : (
                        <div className="w-16 h-16 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full flex items-center justify-center text-white font-bold text-xl">
                          {member.name[0]}
                        </div>
                      )}
                      <div>
                        <h3 className="text-xl font-bold text-gray-800 dark:text-white">{member.name}</h3>
                        <p className="text-purple-600 dark:text-purple-400 font-medium">{member.role}</p>
                      </div>
                    </div>
                    <p className="text-gray-600 dark:text-gray-300">{member.description}</p>
                    <div className="bg-purple-50 dark:bg-gray-700/50 rounded-lg p-3">
                      <span className="text-sm font-medium text-purple-600 dark:text-purple-400">Favorite: </span>
                      <span className="text-sm text-gray-700 dark:text-gray-200">{member.favorite}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

        {activeTab === "songs" && (
          <div className="space-y-6">
            <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 shadow-xl">
              <h3 className="text-2xl font-bold mb-6 text-gray-800 dark:text-white">Our Repertoire</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="text-left text-sm text-gray-500 dark:text-gray-400 border-b border-gray-200 dark:border-gray-700">
                      <th 
                        className="pb-3 font-medium cursor-pointer hover:text-purple-600 dark:hover:text-purple-400 transition-colors"
                        onClick={() => requestSort('title')}
                      >
                        <div className="flex items-center">
                          Song
                          {sortConfig.key === 'title' && (
                            <span className="ml-1">
                              {sortConfig.direction === 'asc' ? 'â†‘' : 'â†“'}
                            </span>
                          )}
                        </div>
                      </th>
                      <th 
                        className="pb-3 font-medium text-center cursor-pointer hover:text-purple-600 dark:hover:text-purple-400 transition-colors"
                        onClick={() => requestSort('type')}
                      >
                        <div className="flex items-center justify-center">
                          Type
                          {sortConfig.key === 'type' && (
                            <span className="ml-1">
                              {sortConfig.direction === 'asc' ? 'â†‘' : 'â†“'}
                            </span>
                          )}
                        </div>
                      </th>
                      <th 
                        className="pb-3 font-medium text-center cursor-pointer hover:text-purple-600 dark:hover:text-purple-400 transition-colors"
                        onClick={() => requestSort('languages')}
                      >
                        <div className="flex items-center justify-center">
                          Languages
                          {sortConfig.key === 'languages' && (
                            <span className="ml-1">
                              {sortConfig.direction === 'asc' ? 'â†‘' : 'â†“'}
                            </span>
                          )}
                        </div>
                      </th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                    {sortedSongs.map((song, index) => (
                      <tr 
                        key={index} 
                        className="hover:bg-white/30 dark:hover:bg-gray-700/30 transition-colors"
                      >
                        <td className="py-3 pr-4">
                          <div className="font-medium text-gray-800 dark:text-white">
                            {song.alt_title || song.title}
                          </div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">
                            {song.original}
                            {song.artist && <span className="">{song.artist}</span>}
                          </div>
                        </td>
                        <td className="py-3 px-4 text-center">
                          <span className={`inline-block text-xs px-2 py-1 rounded-full ${typeConfig[song.type]?.color || 'bg-gray-200/70 dark:bg-gray-600/50'}`}>
                            {typeConfig[song.type]?.label || song.type}
                          </span>
                        </td>
                        <td className="py-3 px-4 text-center">
                          <div className="flex justify-center gap-1">
                            {song.languages.map((lang) => (
                              <span 
                                key={lang} 
                                title={languageFlags[lang]?.title} 
                                className="text-xl mx-0.5 transform hover:scale-125 transition-transform"
                                aria-label={languageFlags[lang]?.title}
                              >
                                {languageFlags[lang]?.emoji}
                              </span>
                            ))}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {activeTab === "gigs" && (
          <div className="space-y-6">
            <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 shadow-xl">
              <h3 className="text-xl font-bold mb-4">Upcoming Shows</h3>
              <div className="space-y-4">
                {upcomingEvents.map((event: { id: string; title: string; date: string; endDate?: string; location: string; setlist?: { days: { day?: number; type: string }[] } | string; link?: string; featured?: boolean }) => (
                  <div 
                    key={event.id} 
                    className={`p-4 rounded-xl ${event.featured ? 'bg-purple-50 dark:bg-gray-700/50' : 'bg-white/50 dark:bg-gray-800/30'}`}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <h4 className="font-bold text-lg">{event.title}</h4>
                        <p className="text-gray-600 dark:text-gray-300">
                          {new Date(event.date).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                          })}
                          {event.endDate && ` - ${new Date(event.endDate).toLocaleDateString('en-US', { 
                            month: 'long', 
                            day: 'numeric' 
                          })}`}
                        </p>
                        <p className="text-sm text-gray-500 dark:text-gray-400">{event.location}</p>
                        <div className="mt-2">
                          <span className="inline-flex items-center text-sm text-purple-600 dark:text-purple-400">
                            <Music2 className="mr-1 h-4 w-4" />
                            {event.setlist && typeof event.setlist !== 'string' ? (
                              event.setlist.days.map((day, i) => (
                                <span key={i} className="mr-2">
                                  {i > 0 && ' â€¢ '}
                                  {day.day ? `Day ${day.day}: ` : ''}{day.type}
                                </span>
                              ))
                            ) : (
                              <span>{event.setlist ? `Setlist: ${event.setlist}` : 'No setlist available'}</span>
                            )}
                          </span>
                        </div>
                      </div>
                      {event.link && (
                        <a
                          href={event.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium transition-colors whitespace-nowrap ${
                            event.featured 
                              ? 'bg-purple-600 text-white hover:bg-purple-700' 
                              : 'bg-purple-100 dark:bg-gray-700 text-purple-700 dark:text-purple-300 hover:bg-purple-200 dark:hover:bg-gray-600'
                          }`}
                        >
                          More Info
                          <ExternalLink className="ml-1 h-3 w-3" />
                        </a>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Contact Section */}
        <div className="bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl p-8 text-white text-center mt-12 shadow-lg">
          <h3 className="text-3xl font-bold mb-4">Book Korniha Band</h3>
          <p className="text-xl mb-6 max-w-2xl mx-auto">
            Want us to perform at your event? We'd love to bring anime music to your audience!
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <a
              href="mailto:korniha.band@korniha.lt"
              className="px-8 py-3 bg-white dark:bg-gray-100 text-purple-600 rounded-full hover:bg-purple-50 dark:hover:bg-gray-200 transition-colors font-semibold text-lg flex items-center justify-center gap-2 flex-1 sm:flex-none"
            >
              <Mail size={20} />
              Contact Us
            </a>
            <a 
              href="https://www.youtube.com/@KornihaBand" 
              target="_blank"
              rel="noopener noreferrer"
              className="px-8 py-3 border-2 border-white text-white rounded-full hover:bg-white hover:text-red-600 transition-colors font-semibold text-lg flex items-center justify-center gap-2 flex-1 sm:flex-none"
            >
              <Youtube size={20} />
              YouTube
            </a>
            <a 
              href="https://www.facebook.com/kornihaband" 
              target="_blank"
              rel="noopener noreferrer"
              className="px-8 py-3 border-2 border-white text-white rounded-full hover:bg-white hover:text-blue-600 transition-colors font-semibold text-lg flex items-center justify-center gap-2 flex-1 sm:flex-none"
            >
              <FacebookIcon size={20} />
              Facebook
            </a>
          </div>
          </div>
        </div>
      </div>
    </div>
  );
}